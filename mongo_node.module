<?php

/**
 * @file
 * Generate mongo entities similar to nodes with bundles
 */

/**
 * Returns the saved configuration file settings for nodes with bundles.
 * @return array
 *   Settings for Mongo node types and bundles
 */
function mongo_node_settings() {
  $settings = &drupal_static(__FUNCTION__);

  if (!isset($settings)) {
    $module_name = 'mongo_node';
    $path = drupal_get_path('module', 'mongo_node');

    $file_name = $module_name . '.conf.php';
    $default_settings_file = $path . '/default.' . $file_name;
    $settings_file = $path . '/' . $file_name;

    // Include default settings file if no settings file added.
    if (file_exists($settings_file)) {
      include $settings_file;
    }
    elseif (file_exists($default_settings_file)) {
      include $default_settings_file;
    }
  }

  return $settings;
}

/**
 * Saves into the configuration file the settings for nodes and bundles.
 *
 * @param array $set
 *   Settings array
 */
function mongo_node_settings_save(array $set) {
  $module_name = 'mongo_node';
  $path = drupal_get_path('module', 'mongo_node');

  $export = '<?php $settings = ' . var_export($set, TRUE) . ';';
  file_put_contents($path . '/' . $module_name . '.conf.php', $export);

  drupal_static_reset('mongo_node_settings');
  entity_info_cache_clear();
  entity_property_info_cache_clear();
  field_info_cache_clear();
  menu_rebuild();
}

/**
 * Retrieve default settings entity type.
 *
 * Entity settings can be used to save them in the configuration file.
 *
 * @param string $label
 *   Label of the entity type
 * @param string $machine_name
 *   Machine name of the entity type
 *
 * @return array
 *   Settings for an entity type
 */
function mongo_node_type_default_settings($label, $machine_name) {
  $set[$machine_name] = array(
    'label' => $label,
    'bundles' => array(),
    'fieldable' => TRUE,
  );

  return $set;
}

/**
 * Retrieve default settings for a bundle.
 *
 * Bundle settings can be used to save them in the configuration file.
 *
 * @param string $label
 *   Label of the bundle
 * @param string $machine_name
 *   Machine name of the bundle
 * @param string $description
 *   Description of the bundle
 *
 * @return array
 *   Settings for a bundle
 */
function mongo_node_bundle_default_settings($label, $machine_name, $description = '') {
  $set[$machine_name] = array(
    'label' => $label,
    'description' => $description,
  );
  return $set;
}

/**
 * Implements hook_menu().
 */
function mongo_node_menu() {
  $set = mongo_node_settings();

  $items = array();

  $items['admin/structure/mongo-node'] = array(
    'title' => 'Mongo entities',
    'description' => 'Manage mongo entity types and bundles.',
    'page callback' => 'mongo_node_entities',
    'access callback' => 'mongo_node_access',
    'access arguments' => array('administer'),
    'file' => 'mongo_node.admin.inc',
  );

  $items['admin/structure/mongo-node/add'] = array(
    'title' => 'Add entity',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mongo_node_type_create_form'),
    'access callback' => 'mongo_node_access',
    'access arguments' => array('create'),
    'file' => 'mongo_node.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  foreach ($set as $entity_type => $settings) {
    // Manage mongo entities.
    $items['admin/structure/mongo-node/' . $entity_type] = array(
      'title' => $settings['label'],
      'page callback' => 'mongo_node_bundles',
      'page arguments' => array(3),
      'access callback' => 'mongo_node_access',
      'access arguments' => array('administer', $entity_type),
      'file' => 'mongo_node.admin.inc',
    );

    $items['admin/structure/mongo-node/' . $entity_type . '/add'] = array(
      'title' => 'Add bundle',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mongo_node_bundle_create_form', 3),
      'access callback' => 'mongo_node_access',
      'access arguments' => array('administer', $entity_type),
      'file' => 'mongo_node.admin.inc',
      'type' => MENU_LOCAL_ACTION,
    );

    $items['admin/structure/mongo-node/' . $entity_type . '/edit'] = array(
      'title' => $settings['label'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mongo_node_type_edit_form', 3),
      'access callback' => 'mongo_node_access',
      'access arguments' => array('administer', $entity_type),
      'file' => 'mongo_node.admin.inc',
    );

    $items['admin/structure/mongo-node/' . $entity_type . '/delete'] = array(
      'title' => 'Delete entity',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('mongo_node_type_delete_form', 3),
      'access callback' => 'mongo_node_access',
      'access arguments' => array('administer', $entity_type),
      'file' => 'mongo_node.admin.inc',
    );

    // Manage mongo entities bundles.
    foreach ($settings['bundles'] as $bundle => $bundle_settings) {
      $items['admin/structure/mongo-node/' . $entity_type . '/manage/' . $bundle] = array(
        'title' => $bundle_settings['label'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mongo_node_bundle_edit_form', 3, 5),
        'access callback' => 'mongo_node_access',
        'access arguments' => array('administer', $bundle),
        'file' => 'mongo_node.admin.inc',
      );

      $items['admin/structure/mongo-node/' . $entity_type . '/manage/' . $bundle . '/edit'] = array(
        'title' => $bundle_settings['label'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mongo_node_bundle_edit_form', 3, 5),
        'access callback' => 'mongo_node_access',
        'access arguments' => array('administer', $bundle),
        'file' => 'mongo_node.admin.inc',
      );

      $items['admin/structure/mongo-node/' . $entity_type . '/manage/' . $bundle . '/delete'] = array(
        'title' => $bundle_settings['label'],
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mongo_node_bundle_delete_form', 3, 5),
        'access callback' => 'mongo_node_access',
        'access arguments' => array('administer', $bundle),
        'file' => 'mongo_node.admin.inc',
      );

      // We need this for Field UI tabs to work.
      $items['admin/structure/mongo-node/' . $entity_type . '/manage/' . $bundle . '/view'] = array(
        'title' => 'Edit',
        'access callback' => 'mongo_node_access',
        'access arguments' => array('administer', $bundle),
        'type' => MENU_DEFAULT_LOCAL_TASK,
      );
    }
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function mongo_node_permission() {
  $permissions = array(
    // Permissions for mongo entity.
    'administer mongo entity type' => array(
      'title' => t('Administer mongo entity types'),
    ),
    'create mongo entity type' => array(
      'title' => t('Create mongo entity types'),
    ),
  );

  // Generate permissions per mongo entity.
  foreach (mongo_node_settings() as $entity_type_name => $entity) {
    $permissions += array(
      // Permission for entity_type.
      "administer $entity_type_name" => array(
        'title' => t('Administer %entity_type_name', array('%entity_type_name' => $entity['label'])),
      ),

      // Permission for entity type contents.
      "view published $entity_type_name content" => array(
        'title' => t('%entity_type_name: View published content', array('%entity_type_name' => $entity['label'])),
      ),
      "view any unpublished $entity_type_name content" => array(
        'title' => t('%entity_type_name: View any unpublished content', array('%entity_type_name' => $entity['label'])),
      ),
      "view own unpublished $entity_type_name content" => array(
        'title' => t('%entity_type_name: View own content', array('%entity_type_name' => $entity['label'])),
      ),
      "create new $entity_type_name content" => array(
        'title' => t('%entity_type_name: Create new content', array('%entity_type_name' => $entity['label'])),
      ),
      "edit any $entity_type_name content" => array(
        'title' => t('%entity_type_name: Edit any content', array('%entity_type_name' => $entity['label'])),
      ),
      "delete any $entity_type_name content" => array(
        'title' => t('%entity_type_name: Delete any content', array('%entity_type_name' => $entity['label'])),
      ),
    );
    foreach ($entity['bundles'] as $bundle_name => $bundle) {
      $permissions += array(
        // Permissions for bundle.
        "administer $bundle_name" => array(
          'title' => t('Administer %bundle_name', array('%bundle_name' => $bundle['label'])),
        ),

        // Permissions for content.
        "create new $bundle_name content" => array(
          'title' => t('%bundle_name: Create new content', array('%bundle_name' => $bundle['label'])),
        ),
        "edit any $bundle_name content" => array(
          'title' => t('%bundle_name: Edit any content', array('%bundle_name' => $bundle['label'])),
        ),
        "edit own $bundle_name content" => array(
          'title' => t('%bundle_name: Edit own content', array('%bundle_name' => $bundle['label'])),
        ),
        "delete any $bundle_name content" => array(
          'title' => t('%bundle_name: Delete any content', array('%bundle_name' => $bundle['label'])),
        ),
        "delete own $bundle_name content" => array(
          'title' => t('%bundle_name: Delete own content', array('%bundle_name' => $bundle['label'])),
        ),
      );
    }
  }
  return $permissions;
}

/**
 * Implements hook_entity_info().
 */
function mongo_node_entity_info() {
  $set = mongo_node_settings();
  $entities = array();

  foreach ($set as $entity_name => $settings) {
    $entities[$entity_name] = array(
      'label' => $settings['label'],
      'module' => 'mongo_node',
      'entity keys' => array(
        'id' => 'mid',
        'label' => 'title',
        'bundle' => 'type',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'fieldable' => TRUE,
      'admin ui' => array(
        'path' => 'admin/content/mongo_node/' . $entity_name,
        'controller class' => 'MongoNodeUIController',
      ),
      'base table' => NULL,
      'bundles' => array(),
      'entity class' => 'MongoNode',
      'controller class' => 'MongoNodeController',
      'access callback' => 'mongo_node_access',
      'uri callback' => 'entity_class_uri',
    );
  }

  return $entities;
}

/**
 * Retrieve a default set of entity properties similar to the node.
 * @return array
 *   Default entity properties.
 */
function mongo_node_default_properties() {
  $properties = array(
    'mid' => array(
      'label' => t('Entity ID'),
      'type' => 'integer',
      'description' => t('The primary identifier for a server.'),
    ),
    'type' => array(
      'label' => t('Type'),
      'type' => 'text',
      'description' => t('The type of the entity.'),
    ),
    'language' => array(
      'label' => t('Language'),
      'type' => 'text',
      'description' => t('The language of the entity.'),
    ),
    'title' => array(
      'label' => t('Title'),
      'type' => 'text',
      'description' => t('The title of the entity.'),
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'uid' => array(
      'label' => t('Uid'),
      'type' => 'integer',
      'description' => t('The user id.'),
    ),
    'status' => array(
      'label' => t('Status'),
      'type' => 'boolean',
      'description' => t('The status of the entity.'),
    ),
    'created' => array(
      'label' => t('Date created'),
      'type' => 'date',
      'description' => t('The creation date.'),
    ),
    'changed' => array(
      'label' => t('Date changed'),
      'type' => 'date',
      'description' => t('The date the item was changed.'),
    ),
    'sticky' => array(
      'label' => t('Sticky in lists'),
      'type' => 'integer',
      'description' => t('Show as sticky in lists.'),
    ),
  );
  return $properties;
}

/**
 * Implements hook_entity_property_info().
 */
function mongo_node_entity_property_info() {
  $set = mongo_node_settings();

  foreach ($set as $entity_type => $settings) {
    if (isset($settings['properties'])) {
      $info[$entity_type]['properties'] = $settings['properties'];
    }
    else {
      $info[$entity_type]['properties'] = mongo_node_default_properties();
    }
  }

  return $info;
}

/**
 * Implements hook_entity_info_alter().
 */
function mongo_node_entity_info_alter(&$entity_info) {
  $set = mongo_node_settings();

  foreach ($set as $entity_name => $settings) {
    foreach ($settings['bundles'] as $bundle => $bundle_settings) {
      $entity_info[$entity_name]['bundles'][$bundle] = array(
        'label' => $bundle_settings['label'],
        'admin' => array(
          'path' => 'admin/structure/mongo-node/' . $entity_name . '/manage/' . $bundle,
          'access callback' => 'mongo_node_access',
          'access arguments' => array('administer', $bundle),
        ),
      );
      if(!empty($bundle_settings['view modes'])) {
        $entity_info[$entity_name]['view modes'] = $bundle_settings['view modes'];
      }
      $entity_info[$entity_name] += array(
        'path' => "$entity_name/%$entity_name",
        'metatags' => TRUE,
      );
    }
  }
}

/**
 * Mongo entity load used in hook_menu().
 */
function mongo_node_load($mid = NULL, $entity_type = '') {
  $mids = (isset($mid) ? array($mid) : array());
  $entity = entity_get_controller($entity_type)->load($mids);
  return $entity ? reset($entity) : FALSE;
}

/**
 * Check access permissions for a entity.
 *
 * @param string $op
 *   Operation to check access for
 * @param MongoNode $mongo_node
 *   Mongo entity object
 * @param object $account
 *   User account to check permission for
 *
 * @return bool
 *   Boolean TRUE if the user has access
 */
function mongo_node_access($op, $entity = NULL, $account = NULL) {
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  if (!isset($entity)) {
    return user_access($op . ' mongo entity type');
  }

  if (is_string($entity)) {
    // Create new entities.
    if ($op == 'create' && user_access('create new ' . $entity . ' content', $account)) {
      return TRUE;
    }
    return user_access("$op any " . $entity . " content", $account);
  }
  else {
    $type = $entity->entityType();
    $bundle = $entity->type;

    if ($op == 'administer') {
      return user_access('administer ' . $type, $account);
    }

    // Create new entities.
    if ($op == 'create' && user_access('create new ' . $type . ' content', $account)) {
      return TRUE;
    }

    // View published entities.
    if ($op == 'view' && $entity->status && user_access('view published ' . $type . ' content', $account)) {
      return TRUE;
    }

    // View unpublished entities
    if ($op == 'view' && !$entity->status && user_access('view any unpublished ' . $type . ' content', $account)) {
      return TRUE;
    }

    // Check if authors can view their own unpublished entities.
    if ($op == 'view' && !$entity->status && user_access('view own unpublished ' . $type . ' content', $account) && $account->uid == $entity->uid && $account->uid != 0) {
      return TRUE;
    }

    // Update own or any entities.
    if ($op == 'update') {
      if (user_access('edit any ' . $bundle . ' content', $account) || (user_access('edit own ' . $bundle . ' content', $account) && ($account->uid == $entity->uid))) {
        return TRUE;
      }
    }

    // Delete own or any entities.
    if ($op == 'delete') {
      if (user_access('delete any ' . $bundle . ' content', $account) || (user_access('delete own ' . $bundle . ' content', $account) && ($account->uid == $entity->uid))) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_entity_query_alter().
 */
function mongo_node_entity_query_alter($query) {
  if (isset($query->entityConditions['entity_type'])) {
    $entity_types = $query->entityConditions['entity_type']['value'];

    if(!is_array($entity_types)) {
      $entity_types = array($entity_types);
    }

    foreach($entity_types as $entity_type){
      $entity_info = entity_get_info($entity_type);

      if (version_compare(PHP_VERSION, '5.3.9', '>=')) {
        if (is_a($entity_info['controller class'], 'MongoNodeController', TRUE)) {
          $query->executeCallback = 'mongo_node_query';
          return;
        }
      }
      else {
        $controller = entity_get_controller($entity_type);
        if (is_a($controller, 'MongoNodeController')) {
          $query->executeCallback = 'mongo_node_query';
          return;
        }
      }
    }
  }


  // Check if fields in field conditions are stored in Mongo
  if(isset($query->fieldConditions)){
    foreach ($query->fieldConditions as $field) {
      if(!isset($field['field']['storage']['type'])) {
        continue;
      }

      if($field['field']['storage']['type'] == 'mongo_node_field_storage') {
        $query->executeCallback = 'mongo_node_query';
        return;
      }
    }
  }
}

/**
 * Executes an EntityFieldQuery on a MongoDB collection.
 */
function mongo_node_query($query) {
  if(!isset($query->entityConditions['entity_type'])) {
    $query->entityConditions['entity_type']['value'] = 'cv';
  }
  
  $find = array();
  $entity_type = $query->entityConditions['entity_type']['value'];
  unset($query->entityConditions['entity_type']);

  $return = array();



  if (isset($entity_type)) {
    $entity_info = entity_get_info($entity_type);
    $entity_property_info = entity_get_property_info($entity_type);

    $entity_map = array(
      'entity_type' => '_type',
      'entity_id' => '_id',
      'bundle' => '_bundle',
    );
    $type_map = array(
      'entity_type' => 'text',
      'entity_id' => 'int',
      'bundle' => 'text',
    );

    foreach ($query->entityConditions as $field => $data) {
      $value = $data['value'];
      $find[$entity_map[$field]] = _mongo_node_query_value($value, $data['operator'], $type_map[$field]);
    }

    foreach ($query->fieldConditions as $index => $data) {
      $field_name = $data['field']['field_name'] . '.' . $data['column'];

      $type = $data['field']['columns'][$data['column']]['type'];
      if (isset($find[$field_name])) {
        $find[$field_name] = array_merge($find[$field_name], _mongo_node_query_value($data['value'], $data['operator'], $type));
      }
      else {
        $find[$data['field']['field_name'] . '.' . $data['column']] = _mongo_node_query_value($data['value'], $data['operator'], $type);
      }

      unset($query->fields[$index]);
    }

    if ($query->propertyConditions) {
      foreach ($query->propertyConditions as $data) {
        // @todo better typing of properties
        $type = isset($entity_property_info['properties'][$data['column']]['type']) ? $entity_property_info['properties'][$data['column']]['type'] : 'int';
        $find[$data['column']] = _mongo_node_query_value($data['value'], $data['operator'], $type);
      }
    }

    $collection = mongodb_collection('fields_current', $entity_type);

    if ($query->count && !$query->range) {
      return $collection->count($find);
    }
    if (empty($find)) {
      $cursor = $collection->find();
    }
    else {
      $cursor = $collection->find($find);
    }
    if (isset($query->hint)) {
      $cursor->hint($query->hint);
    }
    if ($query->range) {
      $cursor->skip($query->range['start'])->limit($query->range['length']);
    }

    if ($query->count) {
      return $cursor->count(TRUE);
    }
    else {
      $sort = array();
      foreach ($query->order as $order) {
        switch ($order['type']) {
          case 'field':
            $key = $order['specifier']['field']['field_name'] . '.' . $order['specifier']['column'];
            break;

          case 'property':
            $key = $order['specifier'];
            break;

          case 'entity':
            $key = $entity_map[$order['specifier']];
            break;

        }
        $sort[$key] = $order['direction'] == 'ASC' ? 1 : -1;
      }
      if ($sort) {
        $cursor->sort($sort);
      }
    }
  }

  $return = array();

  if (isset($cursor)) {
    foreach ($cursor as $row) {

      $id = (string) $row['_id'];
      $row += array('_revision_id' => NULL);
      $entity = entity_create_stub_entity($entity_type, array(
        $id,
        $row['_revision_id'],
        isset($row['_bundle']) ? $row['_bundle'] : NULL,
      ));

      $return[$entity_type][$id] = (object)$row;
    }
  }

  return $return;
}

/**
 * Converts SQL-style field conditions into MongoDB conditions.
 *
 * Borrowed from mongodb_field_storage.module.
 */
function _mongo_node_query_value($value, $operator, $type) {
  if (!isset($operator)) {
    $operator = is_array($value) ? 'IN' : '=';
  }
  // @todo Do we need to convert the value again?

  $value = _mongo_node_field_storage_value($type, $value);

  switch ($operator) {
    case '=':
      return $value;

    case 'IN':
      return array('$in' => $value);

    case 'NOT IN':
      return array('$nin' => $value);

    case 'ALL':
      return array('$all' => $value);

    case '<':
      return array('$lt' => $value);

    case '>':
      return array('$gt' => $value);

    case '<=':
      return array('$lte' => $value);

    case '>=':
      return array('$gte' => $value);

    case '!=':
    case '<>':
      return array('$ne' => $value);

    case 'STARTS_WITH':
      return new MongoRegex('/^' . $value . '/');

    case 'CONTAINS':
      return new MongoRegex('/' . $value . '/i');

    case 'BETWEEN':
      return array('$gte' => $value[0], '$lte' => $value[1]);

    default:
      throw new EntityFieldQueryException("$operator not implemented");

  }
}

/**
 * Implements hook_forms().
 */
function mongo_node_forms($form_id, $args) {
  $forms = array();
  if (strpos($form_id, 'mongo_node_form') !== FALSE) {
    $forms[$form_id]['callback'] = 'mongo_node_form';
  }
  return $forms;
}

/**
 * Implements hook_local_tasks_alter().
 */
function mongo_node_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  $set = mongo_node_settings();

  $path = explode('/', $root_path);
  $entity_type = array_pop($path);
  $path = implode('/', $path);

  if ($path == 'admin/content/mongo_node' && isset($set[$entity_type])) {
    $item = menu_get_item($root_path . '/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}
/**
 * Setting the type of field value.
 *
 * @param string $type
 *   Type of field
 * @param string $value
 *   Vaule of field
 *
 * @return string
 *   Returns the value
 */
function _mongo_node_property_storage_value($type, $value) {
  switch ($type) {
    case 'integer':
    case 'date':
    case 'boolean':
    case 'duration':
      return is_array($value) ? array_map('intval', $value) : intval($value);

    case 'decimal':
      return is_array($value) ? array_map('floatval', $value) : floatval($value);

    default:
      return $value;
  }
}

/**
 * Setting the type of field value.
 *
 * @param string $type
 *   Type of field
 * @param string $value
 *   Vaule of field
 *
 * @return string
 *   Returns the value
 */
function _mongo_node_field_storage_value($type, $value) {
  switch ($type) {
    case 'int':
    case 'serial':
      return is_array($value) ? array_map('intval', $value) : intval($value);

    case 'float':
      return is_array($value) ? array_map('floatval', $value) : floatval($value);

    default:
      return $value;
  }
}

/**
 * Instructs Field API to skip over MongoNode fields when writing.
 */
function _mongo_node_skip_fields($entity_type, $entity, &$skip_fields) {

  $fields = field_info_instances($entity_type);
  if (!empty($fields[$entity_type])) {
    foreach ($fields[$entity_type] as $field) {
      $field_id = $field['field_id'];
      $skip_fields[$field_id] = $field_id;
    }
  }
}

/**
 * Implements hook_field_storage_pre_load().
 */
function mongo_node_field_storage_pre_load($entity_type, $entity, &$skip_fields) {
  _mongo_node_skip_fields($entity_type, $entity, $skip_fields);
}

/**
 * Implements hook_field_storage_pre_insert().
 */
function mongo_node_field_storage_pre_insert($entity_type, $entity, &$skip_fields) {
  _mongo_node_skip_fields($entity_type, $entity, $skip_fields);
}

/**
 * Implements hook_field_storage_pre_update().
 */
function mongo_node_field_storage_pre_update($entity_type, $entity, &$skip_fields) {
  _mongo_node_skip_fields($entity_type, $entity, $skip_fields);
}

/**
 * Implements hook_admin_paths().
 */
function mongo_node_admin_paths() {
  $paths = array();
  $set = mongo_node_settings();
  foreach ($set as $entity_type => $settings) {
    $paths += array(
      $entity_type . '/*/edit' => TRUE,
      $entity_type . '/*/delete' => TRUE,
    );
  }

  return $paths;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function mongo_node_ctools_plugin_directory($module, $plugin) {
  if ($module == 'entityreference') {
    return 'plugins/' . $plugin;
  }
}
